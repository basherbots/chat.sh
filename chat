#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/chat.config"
HISTORY_FILE="$SCRIPT_DIR/chat.history"

# System prompt as a variable for easy editing
SYSTEM_PROMPT="You are in a Linux Terminal. ALWAYS respond using <bot>response goes here</bot> markup. You MUST ALWAYS include executable bash scripts within <bash>bash script here</bash> tags. NEVER use backticks for code, ALWAYS use <bash> tags as these will be parsed out and executed. When asked to create files etc, assume the current directory. Always escape quotes since you're in a terminal. REMEMBER: YOU MUST ALWAYS OUTPUT THE ACTUAL CODE IN <bash> TAGS, NOT JUST DESCRIBE IT. The content may be | piped...DO NOT output any extra content like 'Done!' or 'Ok' if there is code, just output the tags with the code so it can run."

# Function to load or prompt for configuration
load_or_prompt_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi

    if [ -z "$OPENROUTER_API_KEY" ]; then
        read -p "Enter your OpenRouter API key: " OPENROUTER_API_KEY >&2
        echo "OPENROUTER_API_KEY='$OPENROUTER_API_KEY'" >> "$CONFIG_FILE"
    fi

    if [ -z "$OPENROUTER_MODEL" ]; then
        read -p "Enter the OpenRouter model (e.g., openai/gpt-3.5-turbo): " OPENROUTER_MODEL >&2
        echo "OPENROUTER_MODEL='$OPENROUTER_MODEL'" >> "$CONFIG_FILE"
    fi
}

# Function to send message to OpenRouter API
send_message() {
    local messages="$1"
    local response=$(curl -s "https://openrouter.ai/api/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENROUTER_API_KEY" \
        -d '{
            "model": "'"$OPENROUTER_MODEL"'",
            "messages": '"$messages"'
        }')
    
    echo "$response" | sed -n 's/.*<bot>\(.*\)<\/bot>.*/\1/p' | sed 's/\\n/\n/g'
}

# Function to update history
update_history() {
    local role="$1"
    local content="$2"
    echo "<$role>$content</$role>" >> "$HISTORY_FILE"
}

# Function to clear history
clear_history() {
    if [ -f "$HISTORY_FILE" ]; then
        rm "$HISTORY_FILE"
        echo "Chat history cleared." >&2
    else
        echo "No chat history found." >&2
    fi
    exit 0
}

# Function to execute bash scripts found in the response
execute_bash_scripts() {
    local response="$1"
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ \<bash\>(.*)\</bash\> ]]; then
            local script="${BASH_REMATCH[1]}"
            eval "$script" >/dev/null 2>&1
        fi
    done <<< "$response"
}

# Main chat function
chat() {
    local user_input="$1"
    
    # Load history if exists
    if [ -f "$HISTORY_FILE" ]; then
        history=$(cat "$HISTORY_FILE")
    else
        history=""
    fi

    # Prepare the messages for the API
    local messages="["
    messages+="{\"role\":\"system\",\"content\":\"$SYSTEM_PROMPT\"},"
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ \<user\>(.*)\</user\> ]]; then
            messages+="{\"role\":\"user\",\"content\":\"${BASH_REMATCH[1]}\"},"
        elif [[ $line =~ \<bot\>(.*)\</bot\> ]]; then
            messages+="{\"role\":\"assistant\",\"content\":\"${BASH_REMATCH[1]}\"},"
        fi
    done <<< "$history"
    messages+="{\"role\":\"user\",\"content\":\"$user_input\"}]"

    # Send message and get response
    local response=$(send_message "$messages")
    echo "$response"

    # Execute any bash scripts found in the response
    execute_bash_scripts "$response"

    # Update history with user input and assistant's response
    update_history "user" "$user_input"
    update_history "bot" "$response"
}

# Load or prompt for configuration
load_or_prompt_config

# Check for --clear flag
if [ "$1" = "--clear" ]; then
    clear_history
fi

# Run chat function with input from command line or pipe
if [ -p /dev/stdin ]; then
    # Input is coming from a pipe
    user_input=$(cat)
else
    # Input is coming from command line argument
    user_input="$1"
fi

if [ -z "$user_input" ]; then
    echo "Usage: $0 [--clear] \"Your message here\"" >&2
    echo "       echo \"Your message here\" | $0" >&2
    exit 1
fi

chat "$user_input"